
Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 896) {
      for (c5, 0, 1024) {
        buf02[((c5 + int32((int64(c3)*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c5) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((c5 + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c5) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 896) {
      for (c5, 0, 1024) {
        buf02[((c5 + int32((int64(c3)*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c5) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((c5 + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c5) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01 < 896 | 0
		for 0 <= i02 < 1024 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 768) {
      for (c5, 0, 1024) {
        buf02[((c5 + int32((int64(c1)*(int64)1024))) + int32((int64(c3)*(int64)917504)))] = ((((((buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(c3)*(int64)921348)))] + (buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c5) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c5) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) + buf00[((c5 + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c5) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))])
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 896) {
      for (c5, 0, 768) {
        buf02[((c1 + int32((int64(c3)*(int64)1024))) + int32((int64(c5)*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(c5)*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c5)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c5)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(c5)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(c5)*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c5)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c5)*(int64)921348) + (int64)921348)))])
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 1024) {
      for (c5, 0, 896) {
        buf02[((c3 + int32((int64(c5)*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(c5)*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(c5)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(c5)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c3) + (int64)1)) + int32((int64(c5)*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(c5)*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((c3 + int32(((int64(c5)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)2)) + int32(((int64(c5)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00 < 768 | 0
		for 0 <= i02 < 1024 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            buf02[((((c5*32) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            buf02[((((c5*64) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            buf02[((((c5*128) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            buf02[((((c5*32) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            buf02[((((c5*64) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            buf02[((((c5*128) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            buf02[((((c5*32) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            buf02[((((c5*64) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            buf02[((((c5*128) + c9) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c9) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i01_inner < 64 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i01_inner < 64 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i01_inner < 64 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i01_inner < 32 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i01_inner < 32 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00 < 768 | 0
		for 0 <= i02 < 1024 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 768) {
      for (c5, 0, 256) {
        unrolled (c7, 0, 4) {
          buf02[((((c5*4) + c7) + int32((int64(c1)*(int64)1024))) + int32((int64(c3)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(c3)*(int64)921348)))] + (buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*4) + c7) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*4) + c7)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 768) {
      for (c5, 0, 128) {
        unrolled (c7, 0, 8) {
          buf02[((((c5*8) + c7) + int32((int64(c1)*(int64)1024))) + int32((int64(c3)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(c3)*(int64)921348)))] + (buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*8) + c7) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*8) + c7)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 768) {
      for (c5, 0, 64) {
        unrolled (c7, 0, 16) {
          buf02[((((c5*16) + c7) + int32((int64(c1)*(int64)1024))) + int32((int64(c3)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(c3)*(int64)921348)))] + (buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*16) + c7) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*16) + c7)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(c3)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*32) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*16) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*8) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i01_inner < 128 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*32) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*16) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*8) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i01_inner < 128 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*32) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*16) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*8) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i01_inner < 128 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*128) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*128) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*128) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*16) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*8) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*4) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i01_inner < 32 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c1*32) + c5))*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c1*32) + c5))*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c1*32) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*16) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*8) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*4) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*16) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*8) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*4) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*8) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*4) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*2) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*8) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*4) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*2) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01 < 896 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*8) + c9)*4) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*4) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*4) + c9)*8) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*8) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 896) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*2) + c9)*16) + c11) + int32((int64(c1)*(int64)1024))) + int32((int64(((c3*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32((int64(c1)*(int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(c1)*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c9)*16) + c11) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)2)) + int32(((int64(c1)*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 28 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 28) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*32) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*32) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*64) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*64) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 32 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 24) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 12 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 64 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 12) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*64) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i01_outer < 7 | 0
	for 0 <= i00_outer < 6 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 128 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 7) {
    for (c3, 0, 6) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c1*128) + c7))*(int64)1024))) + int32((int64(((c3*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c3*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c1*128) + c7))*(int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c1*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*128) + c9))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01 < 896 | 0
		for 0 <= i02 < 1024 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c5*32) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c5*64) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c5*128) + c11) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c11) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            buf02[((((c5*32) + c9) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c9) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            buf02[((((c5*64) + c9) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c9) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            buf02[((((c5*128) + c9) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c9) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            buf02[((((c5*32) + c9) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c9) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            buf02[((((c5*64) + c9) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c9) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            buf02[((((c5*128) + c9) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c9) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            buf02[((((c5*32) + c9) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*32) + c9) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*32) + c9)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            buf02[((((c5*64) + c9) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*64) + c9) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*64) + c9)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            buf02[((((c5*128) + c9) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*128) + c9) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*128) + c9)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_inner < 64 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_inner < 32 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i02_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*32) + c9)*4) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c9)*4) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*16) + c9)*8) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*8) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*8) + c9)*16) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*16) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i02_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*32) + c9)*4) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c9)*4) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*16) + c9)*8) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*8) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*8) + c9)*16) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*16) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i02_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*32) + c9)*4) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c9)*4) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*16) + c9)*8) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*8) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*8) + c9)*16) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*16) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i02_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*16) + c9)*4) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*4) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*8) + c9)*8) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*8) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*4) + c9)*16) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*16) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01 < 896 | 0
		for 0 <= i02 < 1024 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 896) {
      for (c5, 0, 256) {
        unrolled (c7, 0, 4) {
          buf02[((((c5*4) + c7) + int32((int64(c3)*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*4) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*4) + c7) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*4) + c7)) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 896) {
      for (c5, 0, 128) {
        unrolled (c7, 0, 8) {
          buf02[((((c5*8) + c7) + int32((int64(c3)*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*8) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*8) + c7) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*8) + c7)) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 896) {
      for (c5, 0, 64) {
        unrolled (c7, 0, 16) {
          buf02[((((c5*16) + c7) + int32((int64(c3)*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*16) + c7)) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c5*16) + c7) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c5*16) + c7)) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i02_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*16) + c9)*4) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*4) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*8) + c9)*8) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*8) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*4) + c9)*16) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*16) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i02_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*8) + c9)*4) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*4) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*4) + c9)*8) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*8) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*2) + c9)*16) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c9)*16) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_inner < 64 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i02_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*8) + c9)*4) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*4) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*4) + c9)*8) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*8) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*2) + c9)*16) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c9)*16) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i02_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*16) + c9)*4) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c9)*4) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*8) + c9)*8) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*8) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*4) + c9)*16) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*16) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i02_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((((c5*8) + c9)*4) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c9)*4) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c9)*4) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((((c5*4) + c9)*8) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c9)*8) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c9)*8) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((((c5*2) + c9)*16) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c9)*16) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c9)*16) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_inner < 32 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_inner < 32 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_inner < 64 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_inner < 128 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_inner < 128 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_inner < 128 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 256) {
            unrolled (c11, 0, 4) {
              buf02[((((c9*4) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*4) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*4) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            unrolled (c11, 0, 8) {
              buf02[((((c9*8) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*8) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*8) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            unrolled (c11, 0, 16) {
              buf02[((((c9*16) + c11) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c9*16) + c11) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c9*16) + c11)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 28) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 8 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*32) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*32) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*32) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*16) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 8) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*8) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_outer < 32 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i02_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*8) + c11)*4) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*4) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*4) + c11)*8) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*8) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*2) + c11)*16) + c13) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*2) + c11)*16) + c13) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*2) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_outer < 16 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i02_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((((c5*16) + c11)*4) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*16) + c11)*4) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*16) + c11)*4) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((((c5*8) + c11)*8) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*8) + c11)*8) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*8) + c11)*8) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 7) {
      for (c5, 0, 16) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((((c5*4) + c11)*16) + c13) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((((c5*4) + c11)*16) + c13) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((((c5*4) + c11)*16) + c13)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02 < 1024 | 0
		for 0 <= i01 < 896 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 896) {
            buf02[((((c3*32) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 896) {
            buf02[((((c3*64) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 896) {
            buf02[((((c3*128) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 896) {
            buf02[((((c3*32) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 896) {
            buf02[((((c3*64) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 896) {
            buf02[((((c3*128) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 896) {
            buf02[((((c3*32) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c3*32) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 896) {
            buf02[((((c3*64) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c3*64) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 896) {
            buf02[((((c3*128) + c7) + int32((int64(c9)*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(c9)*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(c9)*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(c9)*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*32) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*32) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*32) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*64) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*64) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*64) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c3*128) + c9) + int32((int64(((c5*128) + c11))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((c5*128) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((c5*128) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            buf02[((((c3*32) + c7) + int32((int64(((c5*32) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c5*32) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            buf02[((((c3*32) + c7) + int32((int64(((c5*64) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c5*64) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            buf02[((((c3*32) + c7) + int32((int64(((c5*128) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c5*128) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            buf02[((((c3*64) + c7) + int32((int64(((c5*32) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c5*32) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            buf02[((((c3*64) + c7) + int32((int64(((c5*64) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c5*64) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            buf02[((((c3*64) + c7) + int32((int64(((c5*128) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c5*128) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            buf02[((((c3*128) + c7) + int32((int64(((c5*32) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c5*32) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c5*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            buf02[((((c3*128) + c7) + int32((int64(((c5*64) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c5*64) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c5*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            buf02[((((c3*128) + c7) + int32((int64(((c5*128) + c9))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c5*128) + c9))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c5*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 64 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*64) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*128) + c7) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*64) + c7) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*32) + c7) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00 < 768 | 0
	for 0 <= i02 < 1024 | 0
		for 0 <= i01 < 896 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 1024) {
      for (c5, 0, 224) {
        unrolled (c7, 0, 4) {
          buf02[((c3 + int32((int64(((c5*4) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*4) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*4) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*4) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c3) + (int64)1)) + int32((int64(((c5*4) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*4) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((c3 + int32(((int64(((c5*4) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)2)) + int32(((int64(((c5*4) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 1024) {
      for (c5, 0, 112) {
        unrolled (c7, 0, 8) {
          buf02[((c3 + int32((int64(((c5*8) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*8) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*8) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*8) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c3) + (int64)1)) + int32((int64(((c5*8) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*8) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((c3 + int32(((int64(((c5*8) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)2)) + int32(((int64(((c5*8) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 768) {
    for (c3, 0, 1024) {
      for (c5, 0, 56) {
        unrolled (c7, 0, 16) {
          buf02[((c3 + int32((int64(((c5*16) + c7))*(int64)1024))) + int32((int64(c1)*(int64)917504)))] = ((((((buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*16) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c1)*(int64)921348)))] + (buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*16) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*16) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c3) + (int64)1)) + int32((int64(((c5*16) + c7))*(int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)1)) + int32(((int64(((c5*16) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) + buf00[((c3 + int32(((int64(((c5*16) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c3) + (int64)2)) + int32(((int64(((c5*16) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c1)*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i00_inner < 32 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 8) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 14 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 14) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 28 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 28) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 64 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*64) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 128 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*128) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i01_outer < 7 | 0
			for 0 <= i00_inner < 128 | 0
				for 0 <= i02_inner < 32 | 0
					for 0 <= i01_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 7) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c3*32) + c9) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1024))) + int32((int64(((c1*128) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c7))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)1)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c9) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c9)) + (int64)2)) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c7))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i00_inner < 32 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 16) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 24 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i00_inner < 32 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 24) {
    for (c3, 0, 32) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*32) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*32) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*32) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i00_inner < 64 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 8) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i00_inner < 64 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 16) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 12 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i00_inner < 64 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 12) {
    for (c3, 0, 32) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*64) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*64) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*64) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 8 | 0
		for 0 <= i00_inner < 128 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 8) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*128) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*128) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*128) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 32 | 0
		for 0 <= i00_inner < 128 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 32) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*32) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*32) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*32) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i00_outer < 6 | 0
	for 0 <= i02_outer < 16 | 0
		for 0 <= i00_inner < 128 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01 < 896 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 224) {
            unrolled (c11, 0, 4) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*4) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*4) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*4) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 112) {
            unrolled (c11, 0, 8) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*8) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*8) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*8) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 6) {
    for (c3, 0, 16) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 56) {
            unrolled (c11, 0, 16) {
              buf02[((((c3*64) + c7) + int32((int64(((c9*16) + c11))*(int64)1024))) + int32((int64(((c1*128) + c5))*(int64)917504)))] = ((((((buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32((int64(((c1*128) + c5))*(int64)921348)))] + (buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32((int64(((c9*16) + c11))*(int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)1)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)2052))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) + buf00[((((c3*64) + c7) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c3*64) + c7)) + (int64)2)) + int32(((int64(((c9*16) + c11))*(int64)1026) + (int64)1026))) + int32(((int64(((c1*128) + c5))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01 < 896 | 0
		for 0 <= i00 < 768 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 768) {
            buf02[((((c1*32) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 768) {
            buf02[((((c1*32) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 768) {
            buf02[((((c1*32) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 768) {
            buf02[((((c1*64) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 768) {
            buf02[((((c1*64) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 768) {
            buf02[((((c1*64) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 768) {
            buf02[((((c1*128) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 64) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 128) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 768) {
            buf02[((((c1*128) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 64) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 128) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 768) {
            buf02[((((c1*128) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(c9)*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(c9)*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(c9)*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*32) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 64) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*64) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 128) {
              buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((c5*128) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c5*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c5*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c5*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c5*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c5*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c5*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c5*32) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*32) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*32) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c5*64) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*64) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*64) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c5*128) + c9))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c5*128) + c9))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c5*128) + c9))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 32) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 64) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 32 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 2) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 64 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 4) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00_inner < 128 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 32) {
            unrolled (c11, 0, 4) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c9)*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c9)*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 16) {
            unrolled (c11, 0, 8) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c9)*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c9)*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 8) {
            unrolled (c11, 0, 16) {
              buf02[((c1 + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c9)*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c9)*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 32 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 32) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*32) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02 < 1024 | 0
	for 0 <= i01 < 896 | 0
		for 0 <= i00 < 768 | 0
			comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 896) {
      for (c5, 0, 192) {
        unrolled (c7, 0, 4) {
          buf02[((c1 + int32((int64(c3)*(int64)1024))) + int32((int64(((c5*4) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(((c5*4) + c7))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*4) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*4) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(((c5*4) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(((c5*4) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*4) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*4) + c7))*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 896) {
      for (c5, 0, 96) {
        unrolled (c7, 0, 8) {
          buf02[((c1 + int32((int64(c3)*(int64)1024))) + int32((int64(((c5*8) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(((c5*8) + c7))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*8) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*8) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(((c5*8) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(((c5*8) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*8) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*8) + c7))*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 1024) {
    for (c3, 0, 896) {
      for (c5, 0, 48) {
        unrolled (c7, 0, 16) {
          buf02[((c1 + int32((int64(c3)*(int64)1024))) + int32((int64(((c5*16) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32((int64(((c5*16) + c7))*(int64)921348)))] + (buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*16) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*16) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c1) + (int64)1)) + int32((int64(c3)*(int64)1026))) + int32(((int64(((c5*16) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)1)) + int32(((int64(c3)*(int64)1026) + (int64)2052))) + int32(((int64(((c5*16) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c1 + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*16) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c1) + (int64)2)) + int32(((int64(c3)*(int64)1026) + (int64)1026))) + int32(((int64(((c5*16) + c7))*(int64)921348) + (int64)921348)))])
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 24 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 32 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 24) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 2) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*2) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*2) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 64 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 64) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*64) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_inner < 32 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 28) {
      for (c5, 0, 32) {
        for (c7, 0, 32) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 32 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 32) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*32) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*32) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*32) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_inner < 32 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 14) {
      for (c5, 0, 32) {
        for (c7, 0, 64) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 32 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_inner < 32 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 32) {
    for (c3, 0, 7) {
      for (c5, 0, 32) {
        for (c7, 0, 128) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*32) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*32) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*32) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 64 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 64) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*64) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*64) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*64) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 12 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 64 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 12) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 4) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*4) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*4) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_inner < 64 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 28) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_inner < 64 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 14) {
      for (c5, 0, 64) {
        for (c7, 0, 64) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 16 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_inner < 64 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 16) {
    for (c3, 0, 7) {
      for (c5, 0, 64) {
        for (c7, 0, 128) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*64) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*64) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*64) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i00_outer < 6 | 0
			for 0 <= i02_inner < 128 | 0
				for 0 <= i01_inner < 128 | 0
					for 0 <= i00_inner < 128 | 0
						comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 32) {
              unrolled (c13, 0, 4) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*32) + c11)*4) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*32) + c11)*4) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 16) {
              unrolled (c13, 0, 8) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*16) + c11)*8) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*16) + c11)*8) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 6) {
        for (c7, 0, 128) {
          for (c9, 0, 128) {
            for (c11, 0, 8) {
              unrolled (c13, 0, 16) {
                buf02[((((c1*128) + c7) + int32((int64(((c3*128) + c9))*(int64)1024))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32((int64(((((c5*8) + c11)*16) + c13))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32((int64(((c3*128) + c9))*(int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)1)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)2052))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c7) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c7)) + (int64)2)) + int32(((int64(((c3*128) + c9))*(int64)1026) + (int64)1026))) + int32(((int64(((((c5*8) + c11)*16) + c13))*(int64)921348) + (int64)921348)))])
              }
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 28 | 0
		for 0 <= i02_inner < 128 | 0
			for 0 <= i01_inner < 32 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 28) {
      for (c5, 0, 128) {
        for (c7, 0, 32) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*32) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*32) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*32) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 14 | 0
		for 0 <= i02_inner < 128 | 0
			for 0 <= i01_inner < 64 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 14) {
      for (c5, 0, 128) {
        for (c7, 0, 64) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*64) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*64) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*64) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
for 0 <= i02_outer < 8 | 0
	for 0 <= i01_outer < 7 | 0
		for 0 <= i02_inner < 128 | 0
			for 0 <= i01_inner < 128 | 0
				for 0 <= i00 < 768 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 192) {
            unrolled (c11, 0, 4) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*4) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*4) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*4) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 96) {
            unrolled (c11, 0, 8) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*8) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*8) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*8) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 8) {
    for (c3, 0, 7) {
      for (c5, 0, 128) {
        for (c7, 0, 128) {
          for (c9, 0, 48) {
            unrolled (c11, 0, 16) {
              buf02[((((c1*128) + c5) + int32((int64(((c3*128) + c7))*(int64)1024))) + int32((int64(((c9*16) + c11))*(int64)917504)))] = ((((((buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32((int64(((c9*16) + c11))*(int64)921348)))] + (buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32((int64(((c3*128) + c7))*(int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)1)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)2052))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) + buf00[((((c1*128) + c5) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(((c1*128) + c5)) + (int64)2)) + int32(((int64(((c3*128) + c7))*(int64)1026) + (int64)1026))) + int32(((int64(((c9*16) + c11))*(int64)921348) + (int64)921348)))])
            }
          }
        }
      }
    }
  }
}
NB explored schedules : 735
Best evaluation : 140.371994
Initial exec time : 172.261002
Initial evaluation : 179.220993
Search time : 23792329 ms 
for 0 <= i01_outer < 14 | 0
	for 0 <= i00_outer < 24 | 0
		for 0 <= i01_inner < 64 | 0
			for 0 <= i00_inner < 32 | 0
				for 0 <= i02 < 1024 | 0
					comp02

Generated Halide IR:
assert((reinterpret(uint64, buf02.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf02"))
assert((reinterpret(uint64, buf00.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf00"))
let buf00 = _halide_buffer_get_host(buf00.buffer)
let buf02 = _halide_buffer_get_host(buf02.buffer)
produce  {
  allocate _input00_b0[int32 * 1024 * 896 * 768]
  allocate _comp02_b1[int32 * 1024 * 896 * 768]
  parallel (c1, 0, 14) {
    for (c3, 0, 24) {
      for (c5, 0, 64) {
        for (c7, 0, 32) {
          for (c9, 0, 1024) {
            buf02[((c9 + int32((int64(((c1*64) + c5))*(int64)1024))) + int32((int64(((c3*32) + c7))*(int64)917504)))] = ((((((buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32((int64(((c3*32) + c7))*(int64)921348)))] + (buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]*6)) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)1842696)))]) + buf00[((int32((int64(c9) + (int64)1)) + int32((int64(((c1*64) + c5))*(int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)1)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)2052))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) + buf00[((c9 + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))]) - buf00[((int32((int64(c9) + (int64)2)) + int32(((int64(((c1*64) + c5))*(int64)1026) + (int64)1026))) + int32(((int64(((c3*32) + c7))*(int64)921348) + (int64)921348)))])
          }
        }
      }
    }
  }
}
Best schedule exec time : 163.018997
Speedup : 1.056693
